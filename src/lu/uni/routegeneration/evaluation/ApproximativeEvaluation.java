package lu.uni.routegeneration.evaluation;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;


import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

/**
 *
 * Copyright (c) 2010 University of Luxembourg
 *
 * @file ApproximativeEvaluation.java
 * @date Nov 12, 2010
 *
 * @author Yoann Pign√©
 *
 */

/**
 * Class that evaluate the mobility models generated by the RouteGeneration. 
 * Uses the same baseName and baseFolder to determine the location of different configuration and output files.
 * 
 * Need to be launched with at some parameters
 * 
 * 
 */
public class ApproximativeEvaluation {

	
	
	String baseFolder = "./test/Luxembourg/";
	String baseName = "Luxembourg";
	int stopHour = 11;
	int currentHour=0;
	
	ArrayList<HashMap<String, Integer>> h_inductionLoops;
	HashMap<String, Integer> inductionLoops;
	ArrayList<String> detectors;
	ArrayList<String> edges;

	
	/**
	 * @param args
	 */
	public ApproximativeEvaluation(String[] args) {
		org.util.Environment.getGlobalEnvironment().readCommandLine(args);
		org.util.Environment.getGlobalEnvironment().initializeFieldsOf(this);
		
		h_inductionLoops = new ArrayList<HashMap<String, Integer>>();
		detectors = new ArrayList<String>();
		edges = new ArrayList<String>();
		for( int i =0; i <stopHour; i++){
			h_inductionLoops.add(new HashMap<String, Integer>());
		}
		
		
		DefaultHandler h = new DefaultHandler(){
			@Override
			public void startElement(String uri, String localName,
					String qName, Attributes attributes) throws SAXException {
				if(qName.equals("inductionLoop")){
					String lane = attributes.getValue("lane");
					lane = lane.split("_")[0];
					String id = attributes.getValue("id");
					id = id.split("_")[0];
					if(!detectors.contains(id)){
						detectors.add(id);
						edges.add(lane);
					}
				}
			}
		};
		
		try {
			XMLReader parser = XMLReaderFactory.createXMLReader();
			parser.setContentHandler(h);
			parser.parse(new InputSource(baseFolder+baseName+".add.xml"));
		} catch (Exception ex) {
			ex.printStackTrace(System.err);
		}
		
		
		
		h = new DefaultHandler(){
			@Override
			public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
				if(qName.equals("vehicle")){
					int depart = (int)Double.parseDouble(attributes.getValue("depart")) / 3600 ;
					if (currentHour != depart){
						currentHour=depart;
					}
				}
				else if(qName.equals("route")){
					String route = attributes.getValue("edges");
					for(String edge : route.split(" ")){
						if(edges.contains(edge)){
							if (currentHour < h_inductionLoops.size()) {
								HashMap<String, Integer> h = h_inductionLoops.get(currentHour);
								Integer I = h.get(edge); 
								if(I==null){
									h.put(edge, 1);
								} else {
									h.put(edge,I+1);
								}
							}
						}
					}
				}
			}
		};
		
		try {
			XMLReader parser = XMLReaderFactory.createXMLReader();
			parser.setContentHandler(h);
			parser.parse(new InputSource(baseFolder+baseName+".rou.xml"));
		} catch (Exception ex) {
			ex.printStackTrace(System.err);
		}
		
		
		File f = new File(baseFolder+baseName+".approx_eval.log");
		PrintStream out=null;
		try {
			out = new PrintStream(f);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		out.printf("time\t");
		for(String s : detectors){
			out.printf("%s\t",s);
		}
		out.println();
		for(int i =0; i< stopHour; i++){
			out.printf("%d\t",i+1);
			for(String s  : edges){
				Integer I = h_inductionLoops.get(i).get(s);
				if(I==null)
					out.print("0\t");
				else
					out.printf("%d\t",I);
			}
			out.printf("%n");
		}
		out.printf("%n");
		out.close();
		
		
	}

	/**
	 * @return the baseName
	 */
	public String getBaseName() {
		return baseName;
	}

	/**
	 * @param baseName the baseName to set
	 */
	public void setBaseName(String baseName) {
		this.baseName = baseName;
	}

	/**
	 * @return the baseFolder
	 */
	public String getBaseFolder() {
		return baseFolder;
	}

	/**
	 * @param baseFolder the baseFolder to set
	 */
	public void setBaseFolder(String folderName) {
		this.baseFolder = folderName;
	}


	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new ApproximativeEvaluation(args);
		System.out.println("Done.");
	}

}
